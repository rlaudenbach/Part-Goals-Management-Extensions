<AML>
 <Item type="Method" id="162908E8364C46CEB6E4EE8B595E7306" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// context item = ruc_Definition (rollup configuration)

//System.Diagnostics.Debugger.Launch();System.Diagnostics.Debugger.Break();

// read args passed in
string rollupType = this.getAttribute("rollupType", "");
string dataModelAction = this.getAttribute("dataModelAction", "");

Item rollupDefinition = this;
string rollupServiceMethod = rollupDefinition.getProperty("rollup_service_method","");

// --- run generic rollup service method defined in configuration ---
// rollupType                 *required
// rollupStartNodeId          *required
// rollupStartNodeItemType    *required
// resolutionDirection        *required     --> can be up or down(=default)
// levelProcessingDirection    optional     --> can be up or down.  default = resolutionDirection
// applyResolutionFilter       optional     --> as defined in rollup configuration
// rollupNodeCallbackMethods   optional     --> comma separated list of method names (overrides configured methods)

string AddOrDeleteRollupRelshipMethod = "";
switch (dataModelAction) {
    case "add":
        AddOrDeleteRollupRelshipMethod = "ruc_AddRollupRelationship"; //## reald from config
        break;
    case "delete":
        AddOrDeleteRollupRelshipMethod = "ruc_DeleteRollupRelationship"; //## reald from config
        break;
    case "resetNodeValues":
        AddOrDeleteRollupRelshipMethod = "ruc_ResetNodeValues"; //## reald from config
        break;
}

// process rollupTypes wildcard "*"
Item rollupConfigCollection;
string[] rollupTypes = {""};
if (rollupType == "*") {
    // read all rollup types from configuration
    rollupConfigCollection = this.getItemsByXPath("//Item[@type='ruc_TypeDefinition']");
    rollupTypes = GetCommaSeparatedStringOfPropertyValues(rollupConfigCollection, "rollup_type").Split(',');
}
else {
    rollupTypes[0] = rollupType;
}

if (AddOrDeleteRollupRelshipMethod != "") {
    for (int t=0; t<rollupTypes.Length; t++) {
        Item res;
        if (dataModelAction == "resetNodeValues") {
            // reead more configurations by rollupType from 'ruc_TypeCalculatedValue'
            string rollupTypeXPathCondition = " and rollup_type='"+rollupTypes[t]+"'";
            rollupConfigCollection = this.getItemsByXPath("//Item[@type='ruc_TypeDefinition'"+rollupTypeXPathCondition+"]");
            string rollupUnitPropName = rollupConfigCollection.getProperty("rollup_unit_prop","");

            rollupConfigCollection = this.getItemsByXPath("//Item[@type='ruc_TypeDefinition'"+rollupTypeXPathCondition+"]/*/Item[@type='ruc_TypeCalculatedValue']");
            string[] rollupBasisPropNames_a = GetCommaSeparatedStringOfPropertyValues(rollupConfigCollection, "rollup_basis_prop").Split(',');
            string[] rollupValuePropNames_a = GetCommaSeparatedStringOfPropertyValues(rollupConfigCollection, "rollup_value_prop").Split(',');
    
            string[] rollupCalculatedBasisLabels_a = GetCommaSeparatedStringOfPropertyValues(rollupConfigCollection, "rollup_calculated_basis_label").Split(',');

            // call data model method directly on given node
            Item itm = this.newItem(rollupDefinition.getAttribute("rollupStartNodeItemType",""));
            itm.setID(rollupDefinition.getAttribute("rollupStartNodeId","invalid"));

            for (int j=0; j<rollupValuePropNames_a.Length; j++) {
                itm.setAttribute("rollupType", rollupTypes[t]);
                itm.setAttribute("rollupValuePropName", rollupValuePropNames_a[j]);
                itm.setAttribute("rollupBasisPropName", rollupBasisPropNames_a[j]);
                itm.setAttribute("rollupCalculatedBasisLabel", rollupCalculatedBasisLabels_a[j]);
                itm.setAttribute("rollupUnitPropName", rollupUnitPropName);
    
                res = itm.apply(AddOrDeleteRollupRelshipMethod);
                if (res.isError()) {return res;}
            }
        }   
        else {
            // do rollup with callback methods
            rollupDefinition.setAttribute("rollupType", rollupTypes[t]);
            rollupDefinition.setAttribute("resolutionDirection", "down");
            rollupDefinition.setAttribute("applyResolutionFilter", "0");
            rollupDefinition.setAttribute("levelProcessingDirection", "down");
            rollupDefinition.setAttribute("rollupNodeCallbackMethods", AddOrDeleteRollupRelshipMethod);
            res = rollupDefinition.apply(rollupServiceMethod);
            if (res.isError()) {return res;}
        }
    }
}
return this;
}

// ---------------------------
private string GetCommaSeparatedStringOfPropertyValues (Item ItemCollection, string propName) {
    // find all unique property values
    string commaSepPropValuesString = "";
    string sepChar = "";
    for (int i=0; i<ItemCollection.getItemCount(); i++) {
        Item itm = ItemCollection.getItemByIndex(i);
    
        string propValue = itm.getProperty(propName,"");
        if (commaSepPropValuesString.IndexOf(sepChar+propValue) < 0) {
            commaSepPropValuesString += sepChar + propValue;
            sepChar = ",";
        }
    }
    return commaSepPropValuesString;
}

// ---
private void EoM () {]]></method_code>
  <method_type>C#</method_type>
  <name>ruc_ManageRollupRelOnAllChildren</name>
 </Item>
</AML>